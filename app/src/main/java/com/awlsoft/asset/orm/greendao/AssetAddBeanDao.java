package com.awlsoft.asset.orm.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.awlsoft.asset.model.entry.AssetAddBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASSET_ADD_BEAN".
*/
public class AssetAddBeanDao extends AbstractDao<AssetAddBean, Long> {

    public static final String TABLENAME = "ASSET_ADD_BEAN";

    /**
     * Properties of entity AssetAddBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property BatchNo = new Property(1, String.class, "batchNo", false, "BATCH_NO");
        public final static Property RfidCode = new Property(2, String.class, "rfidCode", false, "RFID_CODE");
        public final static Property BrandId = new Property(3, int.class, "brandId", false, "BRAND_ID");
        public final static Property CategoryId = new Property(4, int.class, "categoryId", false, "CATEGORY_ID");
        public final static Property CategoryGbId = new Property(5, int.class, "categoryGbId", false, "CATEGORY_GB_ID");
        public final static Property ModelId = new Property(6, int.class, "modelId", false, "MODEL_ID");
        public final static Property Price = new Property(7, double.class, "price", false, "PRICE");
        public final static Property OfficeId = new Property(8, int.class, "officeId", false, "OFFICE_ID");
        public final static Property CreateId = new Property(9, int.class, "createId", false, "CREATE_ID");
        public final static Property BuyDate = new Property(10, String.class, "buyDate", false, "BUY_DATE");
        public final static Property DurableYears = new Property(11, int.class, "durableYears", false, "DURABLE_YEARS");
        public final static Property Id = new Property(12, Long.class, "id", true, "_id");
    }


    public AssetAddBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AssetAddBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASSET_ADD_BEAN\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"BATCH_NO\" TEXT," + // 1: batchNo
                "\"RFID_CODE\" TEXT UNIQUE ," + // 2: rfidCode
                "\"BRAND_ID\" INTEGER NOT NULL ," + // 3: brandId
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 4: categoryId
                "\"CATEGORY_GB_ID\" INTEGER NOT NULL ," + // 5: categoryGbId
                "\"MODEL_ID\" INTEGER NOT NULL ," + // 6: modelId
                "\"PRICE\" REAL NOT NULL ," + // 7: price
                "\"OFFICE_ID\" INTEGER NOT NULL ," + // 8: officeId
                "\"CREATE_ID\" INTEGER NOT NULL ," + // 9: createId
                "\"BUY_DATE\" TEXT," + // 10: buyDate
                "\"DURABLE_YEARS\" INTEGER NOT NULL ," + // 11: durableYears
                "\"_id\" INTEGER PRIMARY KEY );"); // 12: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASSET_ADD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AssetAddBean entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String batchNo = entity.getBatchNo();
        if (batchNo != null) {
            stmt.bindString(2, batchNo);
        }
 
        String rfidCode = entity.getRfidCode();
        if (rfidCode != null) {
            stmt.bindString(3, rfidCode);
        }
        stmt.bindLong(4, entity.getBrandId());
        stmt.bindLong(5, entity.getCategoryId());
        stmt.bindLong(6, entity.getCategoryGbId());
        stmt.bindLong(7, entity.getModelId());
        stmt.bindDouble(8, entity.getPrice());
        stmt.bindLong(9, entity.getOfficeId());
        stmt.bindLong(10, entity.getCreateId());
 
        String buyDate = entity.getBuyDate();
        if (buyDate != null) {
            stmt.bindString(11, buyDate);
        }
        stmt.bindLong(12, entity.getDurableYears());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(13, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AssetAddBean entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String batchNo = entity.getBatchNo();
        if (batchNo != null) {
            stmt.bindString(2, batchNo);
        }
 
        String rfidCode = entity.getRfidCode();
        if (rfidCode != null) {
            stmt.bindString(3, rfidCode);
        }
        stmt.bindLong(4, entity.getBrandId());
        stmt.bindLong(5, entity.getCategoryId());
        stmt.bindLong(6, entity.getCategoryGbId());
        stmt.bindLong(7, entity.getModelId());
        stmt.bindDouble(8, entity.getPrice());
        stmt.bindLong(9, entity.getOfficeId());
        stmt.bindLong(10, entity.getCreateId());
 
        String buyDate = entity.getBuyDate();
        if (buyDate != null) {
            stmt.bindString(11, buyDate);
        }
        stmt.bindLong(12, entity.getDurableYears());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(13, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12);
    }    

    @Override
    public AssetAddBean readEntity(Cursor cursor, int offset) {
        AssetAddBean entity = new AssetAddBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // batchNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rfidCode
            cursor.getInt(offset + 3), // brandId
            cursor.getInt(offset + 4), // categoryId
            cursor.getInt(offset + 5), // categoryGbId
            cursor.getInt(offset + 6), // modelId
            cursor.getDouble(offset + 7), // price
            cursor.getInt(offset + 8), // officeId
            cursor.getInt(offset + 9), // createId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // buyDate
            cursor.getInt(offset + 11), // durableYears
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AssetAddBean entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBatchNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRfidCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBrandId(cursor.getInt(offset + 3));
        entity.setCategoryId(cursor.getInt(offset + 4));
        entity.setCategoryGbId(cursor.getInt(offset + 5));
        entity.setModelId(cursor.getInt(offset + 6));
        entity.setPrice(cursor.getDouble(offset + 7));
        entity.setOfficeId(cursor.getInt(offset + 8));
        entity.setCreateId(cursor.getInt(offset + 9));
        entity.setBuyDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDurableYears(cursor.getInt(offset + 11));
        entity.setId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AssetAddBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AssetAddBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AssetAddBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
