package com.awlsoft.asset.orm.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.awlsoft.asset.model.entry.TaskAssetFound;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_ASSET_FOUND".
*/
public class TaskAssetFoundDao extends AbstractDao<TaskAssetFound, Long> {

    public static final String TABLENAME = "TASK_ASSET_FOUND";

    /**
     * Properties of entity TaskAssetFound.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AssetId = new Property(1, Long.class, "assetId", false, "ASSET_ID");
        public final static Property TaskId = new Property(2, String.class, "taskId", false, "TASK_ID");
        public final static Property Checked = new Property(3, boolean.class, "checked", false, "CHECKED");
    }


    public TaskAssetFoundDao(DaoConfig config) {
        super(config);
    }
    
    public TaskAssetFoundDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_ASSET_FOUND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ASSET_ID\" INTEGER," + // 1: assetId
                "\"TASK_ID\" TEXT," + // 2: taskId
                "\"CHECKED\" INTEGER NOT NULL );"); // 3: checked
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_TASK_ASSET_FOUND_ASSET_ID ON TASK_ASSET_FOUND" +
                " (\"ASSET_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_ASSET_FOUND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskAssetFound entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long assetId = entity.getAssetId();
        if (assetId != null) {
            stmt.bindLong(2, assetId);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(3, taskId);
        }
        stmt.bindLong(4, entity.getChecked() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskAssetFound entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long assetId = entity.getAssetId();
        if (assetId != null) {
            stmt.bindLong(2, assetId);
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(3, taskId);
        }
        stmt.bindLong(4, entity.getChecked() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskAssetFound readEntity(Cursor cursor, int offset) {
        TaskAssetFound entity = new TaskAssetFound( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // assetId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // taskId
            cursor.getShort(offset + 3) != 0 // checked
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskAssetFound entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAssetId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTaskId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChecked(cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskAssetFound entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskAssetFound entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskAssetFound entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
