package com.awlsoft.asset.orm.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.awlsoft.asset.model.entry.response.BreakageTaskResponse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BREAKAGE_TASK_RESPONSE".
*/
public class BreakageTaskResponseDao extends AbstractDao<BreakageTaskResponse, Long> {

    public static final String TABLENAME = "BREAKAGE_TASK_RESPONSE";

    /**
     * Properties of entity BreakageTaskResponse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TaskID = new Property(0, String.class, "taskID", false, "TASK_ID");
        public final static Property TASK_DEF_KEY_ = new Property(1, String.class, "TASK_DEF_KEY_", false, "TASK__DEF__KEY_");
        public final static Property BUSINESS_KEY_ = new Property(2, String.class, "BUSINESS_KEY_", false, "BUSINESS__KEY_");
        public final static Property Id = new Property(3, Long.class, "id", true, "_id");
        public final static Property Category_id = new Property(4, int.class, "category_id", false, "CATEGORY_ID");
        public final static Property EctID = new Property(5, String.class, "ectID", false, "ECT_ID");
        public final static Property Breakage_reson = new Property(6, String.class, "breakage_reson", false, "BREAKAGE_RESON");
        public final static Property Breakage_no = new Property(7, String.class, "breakage_no", false, "BREAKAGE_NO");
        public final static Property Status = new Property(8, int.class, "status", false, "STATUS");
        public final static Property WorkareaId = new Property(9, Long.class, "workareaId", false, "WORKAREA_ID");
        public final static Property Price = new Property(10, Double.class, "price", false, "PRICE");
    }


    public BreakageTaskResponseDao(DaoConfig config) {
        super(config);
    }
    
    public BreakageTaskResponseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BREAKAGE_TASK_RESPONSE\" (" + //
                "\"TASK_ID\" TEXT," + // 0: taskID
                "\"TASK__DEF__KEY_\" TEXT," + // 1: TASK_DEF_KEY_
                "\"BUSINESS__KEY_\" TEXT," + // 2: BUSINESS_KEY_
                "\"_id\" INTEGER PRIMARY KEY ," + // 3: id
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 4: category_id
                "\"ECT_ID\" TEXT," + // 5: ectID
                "\"BREAKAGE_RESON\" TEXT," + // 6: breakage_reson
                "\"BREAKAGE_NO\" TEXT," + // 7: breakage_no
                "\"STATUS\" INTEGER NOT NULL ," + // 8: status
                "\"WORKAREA_ID\" INTEGER," + // 9: workareaId
                "\"PRICE\" REAL);"); // 10: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BREAKAGE_TASK_RESPONSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BreakageTaskResponse entity) {
        stmt.clearBindings();
 
        String taskID = entity.getTaskID();
        if (taskID != null) {
            stmt.bindString(1, taskID);
        }
 
        String TASK_DEF_KEY_ = entity.getTASK_DEF_KEY_();
        if (TASK_DEF_KEY_ != null) {
            stmt.bindString(2, TASK_DEF_KEY_);
        }
 
        String BUSINESS_KEY_ = entity.getBUSINESS_KEY_();
        if (BUSINESS_KEY_ != null) {
            stmt.bindString(3, BUSINESS_KEY_);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
        stmt.bindLong(5, entity.getCategory_id());
 
        String ectID = entity.getEctID();
        if (ectID != null) {
            stmt.bindString(6, ectID);
        }
 
        String breakage_reson = entity.getBreakage_reson();
        if (breakage_reson != null) {
            stmt.bindString(7, breakage_reson);
        }
 
        String breakage_no = entity.getBreakage_no();
        if (breakage_no != null) {
            stmt.bindString(8, breakage_no);
        }
        stmt.bindLong(9, entity.getStatus());
 
        Long workareaId = entity.getWorkareaId();
        if (workareaId != null) {
            stmt.bindLong(10, workareaId);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(11, price);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BreakageTaskResponse entity) {
        stmt.clearBindings();
 
        String taskID = entity.getTaskID();
        if (taskID != null) {
            stmt.bindString(1, taskID);
        }
 
        String TASK_DEF_KEY_ = entity.getTASK_DEF_KEY_();
        if (TASK_DEF_KEY_ != null) {
            stmt.bindString(2, TASK_DEF_KEY_);
        }
 
        String BUSINESS_KEY_ = entity.getBUSINESS_KEY_();
        if (BUSINESS_KEY_ != null) {
            stmt.bindString(3, BUSINESS_KEY_);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
        stmt.bindLong(5, entity.getCategory_id());
 
        String ectID = entity.getEctID();
        if (ectID != null) {
            stmt.bindString(6, ectID);
        }
 
        String breakage_reson = entity.getBreakage_reson();
        if (breakage_reson != null) {
            stmt.bindString(7, breakage_reson);
        }
 
        String breakage_no = entity.getBreakage_no();
        if (breakage_no != null) {
            stmt.bindString(8, breakage_no);
        }
        stmt.bindLong(9, entity.getStatus());
 
        Long workareaId = entity.getWorkareaId();
        if (workareaId != null) {
            stmt.bindLong(10, workareaId);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(11, price);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    @Override
    public BreakageTaskResponse readEntity(Cursor cursor, int offset) {
        BreakageTaskResponse entity = new BreakageTaskResponse( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // taskID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TASK_DEF_KEY_
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BUSINESS_KEY_
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // id
            cursor.getInt(offset + 4), // category_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ectID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // breakage_reson
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // breakage_no
            cursor.getInt(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // workareaId
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10) // price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BreakageTaskResponse entity, int offset) {
        entity.setTaskID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTASK_DEF_KEY_(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBUSINESS_KEY_(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCategory_id(cursor.getInt(offset + 4));
        entity.setEctID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBreakage_reson(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBreakage_no(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.getInt(offset + 8));
        entity.setWorkareaId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setPrice(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BreakageTaskResponse entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BreakageTaskResponse entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BreakageTaskResponse entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
