package com.awlsoft.asset.orm.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.awlsoft.asset.model.entry.response.InventoryResponse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVENTORY_RESPONSE".
*/
public class InventoryResponseDao extends AbstractDao<InventoryResponse, Long> {

    public static final String TABLENAME = "INVENTORY_RESPONSE";

    /**
     * Properties of entity InventoryResponse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Office_id = new Property(0, int.class, "office_id", false, "OFFICE_ID");
        public final static Property TASK_DEF_KEY_ = new Property(1, String.class, "TASK_DEF_KEY_", false, "TASK__DEF__KEY_");
        public final static Property BUSINESS_KEY_ = new Property(2, String.class, "BUSINESS_KEY_", false, "BUSINESS__KEY_");
        public final static Property Category_id = new Property(3, int.class, "category_id", false, "CATEGORY_ID");
        public final static Property TaskID = new Property(4, String.class, "taskID", false, "TASK_ID");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Id = new Property(6, Long.class, "id", true, "_id");
        public final static Property Inventory_no = new Property(7, String.class, "inventory_no", false, "INVENTORY_NO");
        public final static Property Workarea_id = new Property(8, int.class, "workarea_id", false, "WORKAREA_ID");
        public final static Property EctID = new Property(9, String.class, "ectID", false, "ECT_ID");
        public final static Property Status = new Property(10, int.class, "status", false, "STATUS");
    }


    public InventoryResponseDao(DaoConfig config) {
        super(config);
    }
    
    public InventoryResponseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVENTORY_RESPONSE\" (" + //
                "\"OFFICE_ID\" INTEGER NOT NULL ," + // 0: office_id
                "\"TASK__DEF__KEY_\" TEXT," + // 1: TASK_DEF_KEY_
                "\"BUSINESS__KEY_\" TEXT," + // 2: BUSINESS_KEY_
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 3: category_id
                "\"TASK_ID\" TEXT," + // 4: taskID
                "\"NAME\" TEXT," + // 5: name
                "\"_id\" INTEGER PRIMARY KEY ," + // 6: id
                "\"INVENTORY_NO\" TEXT," + // 7: inventory_no
                "\"WORKAREA_ID\" INTEGER NOT NULL ," + // 8: workarea_id
                "\"ECT_ID\" TEXT," + // 9: ectID
                "\"STATUS\" INTEGER NOT NULL );"); // 10: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVENTORY_RESPONSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InventoryResponse entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getOffice_id());
 
        String TASK_DEF_KEY_ = entity.getTASK_DEF_KEY_();
        if (TASK_DEF_KEY_ != null) {
            stmt.bindString(2, TASK_DEF_KEY_);
        }
 
        String BUSINESS_KEY_ = entity.getBUSINESS_KEY_();
        if (BUSINESS_KEY_ != null) {
            stmt.bindString(3, BUSINESS_KEY_);
        }
        stmt.bindLong(4, entity.getCategory_id());
 
        String taskID = entity.getTaskID();
        if (taskID != null) {
            stmt.bindString(5, taskID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(7, id);
        }
 
        String inventory_no = entity.getInventory_no();
        if (inventory_no != null) {
            stmt.bindString(8, inventory_no);
        }
        stmt.bindLong(9, entity.getWorkarea_id());
 
        String ectID = entity.getEctID();
        if (ectID != null) {
            stmt.bindString(10, ectID);
        }
        stmt.bindLong(11, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InventoryResponse entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getOffice_id());
 
        String TASK_DEF_KEY_ = entity.getTASK_DEF_KEY_();
        if (TASK_DEF_KEY_ != null) {
            stmt.bindString(2, TASK_DEF_KEY_);
        }
 
        String BUSINESS_KEY_ = entity.getBUSINESS_KEY_();
        if (BUSINESS_KEY_ != null) {
            stmt.bindString(3, BUSINESS_KEY_);
        }
        stmt.bindLong(4, entity.getCategory_id());
 
        String taskID = entity.getTaskID();
        if (taskID != null) {
            stmt.bindString(5, taskID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(7, id);
        }
 
        String inventory_no = entity.getInventory_no();
        if (inventory_no != null) {
            stmt.bindString(8, inventory_no);
        }
        stmt.bindLong(9, entity.getWorkarea_id());
 
        String ectID = entity.getEctID();
        if (ectID != null) {
            stmt.bindString(10, ectID);
        }
        stmt.bindLong(11, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6);
    }    

    @Override
    public InventoryResponse readEntity(Cursor cursor, int offset) {
        InventoryResponse entity = new InventoryResponse( //
            cursor.getInt(offset + 0), // office_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TASK_DEF_KEY_
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BUSINESS_KEY_
            cursor.getInt(offset + 3), // category_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // taskID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // inventory_no
            cursor.getInt(offset + 8), // workarea_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ectID
            cursor.getInt(offset + 10) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InventoryResponse entity, int offset) {
        entity.setOffice_id(cursor.getInt(offset + 0));
        entity.setTASK_DEF_KEY_(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBUSINESS_KEY_(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory_id(cursor.getInt(offset + 3));
        entity.setTaskID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setInventory_no(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWorkarea_id(cursor.getInt(offset + 8));
        entity.setEctID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InventoryResponse entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InventoryResponse entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InventoryResponse entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
